//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference1
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.GUISoap")]
    public interface GUISoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ServiceReference1.ArrayOfXElement> GetDataAsync(bool suppressExceptions, string userName, string password, string dataviewName, string delimitedParameterList, int offset, int limit, string options);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetLookupTableStats", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ServiceReference1.ArrayOfXElement> GetLookupTableStatsAsync(bool suppressExceptions, string userName, string password, string tableName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAllLookupTableStats", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ServiceReference1.ArrayOfXElement> GetAllLookupTableStatsAsync(bool suppressExceptions, string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDataParameterTemplate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ServiceReference1.ArrayOfXElement> GetDataParameterTemplateAsync(bool suppressExceptions, string userName, string password, string dataviewName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ClearCache", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> ClearCacheAsync(bool suppressExceptions, string userName, string password, string cacheName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TransferOwnership", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ServiceReference1.ArrayOfXElement> TransferOwnershipAsync(bool suppressExceptions, string userName, string password, ServiceReference1.ArrayOfXElement ds, int newOwnerCooperatorID, bool includeDescendents);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Search", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ServiceReference1.ArrayOfXElement> SearchAsync(bool suppressExceptions, string userName, string password, string query, bool ignoreCase, bool andTermsTogether, string indexList, string resolverName, int offset, int limit, string options);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ValidateLogin", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ServiceReference1.ArrayOfXElement> ValidateLoginAsync(bool suppressExceptions, string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ChangePassword", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ServiceReference1.ArrayOfXElement> ChangePasswordAsync(bool suppressExceptions, string userName, string password, string targetUserName, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ChangeLanguage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ServiceReference1.ArrayOfXElement> ChangeLanguageAsync(bool suppressExceptions, string userName, string password, int newLanguageID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RenameList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ServiceReference1.ArrayOfXElement> RenameListAsync(bool suppressExceptions, string userName, string password, string existingGroupName, string newGroupName, string existingTabName, string newTabName, int cooperatorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RenameTab", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ServiceReference1.ArrayOfXElement> RenameTabAsync(bool suppressExceptions, string userName, string password, string existingTabName, string newTabName, int cooperatorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetVersion", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetVersionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ServiceReference1.ArrayOfXElement> DeleteListAsync(bool suppressExceptions, string userName, string password, string groupName, string tabName, int cooperatorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SaveData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ServiceReference1.ArrayOfXElement> SaveDataAsync(bool suppressExceptions, string userName, string password, ServiceReference1.ArrayOfXElement ds, string options);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteImage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> DeleteImageAsync(string userName, string password, string imageFileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DownloadImage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ServiceReference1.DownloadImageResponse> DownloadImageAsync(ServiceReference1.DownloadImageRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UploadImage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ServiceReference1.UploadImageResponse> UploadImageAsync(ServiceReference1.UploadImageRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetFileInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ServiceReference1.ArrayOfXElement> GetFileInfoAsync(bool suppressExceptions, string groupName, string versionName, bool onlyAvailable, bool onlyLatest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSearchEngineInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ServiceReference1.ArrayOfXElement> GetSearchEngineInfoAsync(bool suppressExceptions, bool enabledIndexesOnly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ResolveUniqueKeys", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ServiceReference1.ArrayOfXElement> ResolveUniqueKeysAsync(bool suppressExceptions, string userName, string password, ServiceReference1.ArrayOfXElement ds, string options);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SearchByDescriptors", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ServiceReference1.ArrayOfXElement> SearchByDescriptorsAsync(bool suppressExceptions, string userName, string password, string[] traitCodes, string[] operators, string[] valueTypes, string[] values, string method_id, string is_archived);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadImage", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadImageRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string userName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string password;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string appOrDocRelativePath;
        
        public DownloadImageRequest()
        {
        }
        
        public DownloadImageRequest(string userName, string password, string appOrDocRelativePath)
        {
            this.userName = userName;
            this.password = password;
            this.appOrDocRelativePath = appOrDocRelativePath;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadImageResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadImageResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] DownloadImageResult;
        
        public DownloadImageResponse()
        {
        }
        
        public DownloadImageResponse(byte[] DownloadImageResult)
        {
            this.DownloadImageResult = DownloadImageResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadImage", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadImageRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string userName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string password;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string appOrDocRelativePath;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] imageBytes;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public bool createThumbnail;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public bool overwriteIfExists;
        
        public UploadImageRequest()
        {
        }
        
        public UploadImageRequest(string userName, string password, string appOrDocRelativePath, byte[] imageBytes, bool createThumbnail, bool overwriteIfExists)
        {
            this.userName = userName;
            this.password = password;
            this.appOrDocRelativePath = appOrDocRelativePath;
            this.imageBytes = imageBytes;
            this.createThumbnail = createThumbnail;
            this.overwriteIfExists = overwriteIfExists;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadImageResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadImageResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string UploadImageResult;
        
        public UploadImageResponse()
        {
        }
        
        public UploadImageResponse(string UploadImageResult)
        {
            this.UploadImageResult = UploadImageResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface GUISoapChannel : ServiceReference1.GUISoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class GUISoapClient : System.ServiceModel.ClientBase<ServiceReference1.GUISoap>, ServiceReference1.GUISoap
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public GUISoapClient(EndpointConfiguration endpointConfiguration) : 
                base(GUISoapClient.GetBindingForEndpoint(endpointConfiguration), GUISoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public GUISoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(GUISoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public GUISoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(GUISoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public GUISoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.ArrayOfXElement> GetDataAsync(bool suppressExceptions, string userName, string password, string dataviewName, string delimitedParameterList, int offset, int limit, string options)
        {
            return base.Channel.GetDataAsync(suppressExceptions, userName, password, dataviewName, delimitedParameterList, offset, limit, options);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.ArrayOfXElement> GetLookupTableStatsAsync(bool suppressExceptions, string userName, string password, string tableName)
        {
            return base.Channel.GetLookupTableStatsAsync(suppressExceptions, userName, password, tableName);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.ArrayOfXElement> GetAllLookupTableStatsAsync(bool suppressExceptions, string userName, string password)
        {
            return base.Channel.GetAllLookupTableStatsAsync(suppressExceptions, userName, password);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.ArrayOfXElement> GetDataParameterTemplateAsync(bool suppressExceptions, string userName, string password, string dataviewName)
        {
            return base.Channel.GetDataParameterTemplateAsync(suppressExceptions, userName, password, dataviewName);
        }
        
        public System.Threading.Tasks.Task<bool> ClearCacheAsync(bool suppressExceptions, string userName, string password, string cacheName)
        {
            return base.Channel.ClearCacheAsync(suppressExceptions, userName, password, cacheName);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.ArrayOfXElement> TransferOwnershipAsync(bool suppressExceptions, string userName, string password, ServiceReference1.ArrayOfXElement ds, int newOwnerCooperatorID, bool includeDescendents)
        {
            return base.Channel.TransferOwnershipAsync(suppressExceptions, userName, password, ds, newOwnerCooperatorID, includeDescendents);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.ArrayOfXElement> SearchAsync(bool suppressExceptions, string userName, string password, string query, bool ignoreCase, bool andTermsTogether, string indexList, string resolverName, int offset, int limit, string options)
        {
            return base.Channel.SearchAsync(suppressExceptions, userName, password, query, ignoreCase, andTermsTogether, indexList, resolverName, offset, limit, options);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.ArrayOfXElement> ValidateLoginAsync(bool suppressExceptions, string userName, string password)
        {
            return base.Channel.ValidateLoginAsync(suppressExceptions, userName, password);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.ArrayOfXElement> ChangePasswordAsync(bool suppressExceptions, string userName, string password, string targetUserName, string newPassword)
        {
            return base.Channel.ChangePasswordAsync(suppressExceptions, userName, password, targetUserName, newPassword);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.ArrayOfXElement> ChangeLanguageAsync(bool suppressExceptions, string userName, string password, int newLanguageID)
        {
            return base.Channel.ChangeLanguageAsync(suppressExceptions, userName, password, newLanguageID);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.ArrayOfXElement> RenameListAsync(bool suppressExceptions, string userName, string password, string existingGroupName, string newGroupName, string existingTabName, string newTabName, int cooperatorID)
        {
            return base.Channel.RenameListAsync(suppressExceptions, userName, password, existingGroupName, newGroupName, existingTabName, newTabName, cooperatorID);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.ArrayOfXElement> RenameTabAsync(bool suppressExceptions, string userName, string password, string existingTabName, string newTabName, int cooperatorID)
        {
            return base.Channel.RenameTabAsync(suppressExceptions, userName, password, existingTabName, newTabName, cooperatorID);
        }
        
        public System.Threading.Tasks.Task<string> GetVersionAsync()
        {
            return base.Channel.GetVersionAsync();
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.ArrayOfXElement> DeleteListAsync(bool suppressExceptions, string userName, string password, string groupName, string tabName, int cooperatorID)
        {
            return base.Channel.DeleteListAsync(suppressExceptions, userName, password, groupName, tabName, cooperatorID);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.ArrayOfXElement> SaveDataAsync(bool suppressExceptions, string userName, string password, ServiceReference1.ArrayOfXElement ds, string options)
        {
            return base.Channel.SaveDataAsync(suppressExceptions, userName, password, ds, options);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteImageAsync(string userName, string password, string imageFileName)
        {
            return base.Channel.DeleteImageAsync(userName, password, imageFileName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ServiceReference1.DownloadImageResponse> ServiceReference1.GUISoap.DownloadImageAsync(ServiceReference1.DownloadImageRequest request)
        {
            return base.Channel.DownloadImageAsync(request);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.DownloadImageResponse> DownloadImageAsync(string userName, string password, string appOrDocRelativePath)
        {
            ServiceReference1.DownloadImageRequest inValue = new ServiceReference1.DownloadImageRequest();
            inValue.userName = userName;
            inValue.password = password;
            inValue.appOrDocRelativePath = appOrDocRelativePath;
            return ((ServiceReference1.GUISoap)(this)).DownloadImageAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ServiceReference1.UploadImageResponse> ServiceReference1.GUISoap.UploadImageAsync(ServiceReference1.UploadImageRequest request)
        {
            return base.Channel.UploadImageAsync(request);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.UploadImageResponse> UploadImageAsync(string userName, string password, string appOrDocRelativePath, byte[] imageBytes, bool createThumbnail, bool overwriteIfExists)
        {
            ServiceReference1.UploadImageRequest inValue = new ServiceReference1.UploadImageRequest();
            inValue.userName = userName;
            inValue.password = password;
            inValue.appOrDocRelativePath = appOrDocRelativePath;
            inValue.imageBytes = imageBytes;
            inValue.createThumbnail = createThumbnail;
            inValue.overwriteIfExists = overwriteIfExists;
            return ((ServiceReference1.GUISoap)(this)).UploadImageAsync(inValue);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.ArrayOfXElement> GetFileInfoAsync(bool suppressExceptions, string groupName, string versionName, bool onlyAvailable, bool onlyLatest)
        {
            return base.Channel.GetFileInfoAsync(suppressExceptions, groupName, versionName, onlyAvailable, onlyLatest);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.ArrayOfXElement> GetSearchEngineInfoAsync(bool suppressExceptions, bool enabledIndexesOnly)
        {
            return base.Channel.GetSearchEngineInfoAsync(suppressExceptions, enabledIndexesOnly);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.ArrayOfXElement> ResolveUniqueKeysAsync(bool suppressExceptions, string userName, string password, ServiceReference1.ArrayOfXElement ds, string options)
        {
            return base.Channel.ResolveUniqueKeysAsync(suppressExceptions, userName, password, ds, options);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.ArrayOfXElement> SearchByDescriptorsAsync(bool suppressExceptions, string userName, string password, string[] traitCodes, string[] operators, string[] valueTypes, string[] values, string method_id, string is_archived)
        {
            return base.Channel.SearchByDescriptorsAsync(suppressExceptions, userName, password, traitCodes, operators, valueTypes, values, method_id, is_archived);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.GUISoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.GUISoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.GUISoap))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost/gringlobal/gui.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.GUISoap12))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost/gringlobal/gui.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            GUISoap,
            
            GUISoap12,
        }
    }
    
    [System.Xml.Serialization.XmlSchemaProviderAttribute(null, IsAny=true)]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil-lib", "2.0.0.2")]
    public partial class ArrayOfXElement : object, System.Xml.Serialization.IXmlSerializable
    {
        
        private System.Collections.Generic.List<System.Xml.Linq.XElement> nodesList = new System.Collections.Generic.List<System.Xml.Linq.XElement>();
        
        public ArrayOfXElement()
        {
        }
        
        public virtual System.Collections.Generic.List<System.Xml.Linq.XElement> Nodes
        {
            get
            {
                return this.nodesList;
            }
        }
        
        public virtual System.Xml.Schema.XmlSchema GetSchema()
        {
            throw new System.NotImplementedException();
        }
        
        public virtual void WriteXml(System.Xml.XmlWriter writer)
        {
            System.Collections.Generic.IEnumerator<System.Xml.Linq.XElement> e = nodesList.GetEnumerator();
            for (
            ; e.MoveNext(); 
            )
            {
                ((System.Xml.Serialization.IXmlSerializable)(e.Current)).WriteXml(writer);
            }
        }
        
        public virtual void ReadXml(System.Xml.XmlReader reader)
        {
            for (
            ; (reader.NodeType != System.Xml.XmlNodeType.EndElement); 
            )
            {
                if ((reader.NodeType == System.Xml.XmlNodeType.Element))
                {
                    System.Xml.Linq.XElement elem = new System.Xml.Linq.XElement("default");
                    ((System.Xml.Serialization.IXmlSerializable)(elem)).ReadXml(reader);
                    Nodes.Add(elem);
                }
                else
                {
                    reader.Skip();
                }
            }
        }
    }
}
